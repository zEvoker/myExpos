//devman module MOD_4
alias functionNum R1;
alias curPID R2;
alias pagenum R3;
alias blocknum R4;
//disk store
if(R1==1) then
    multipush(R1,R2,R3,R4);
    R1=3;
    R2=R2;
    call MOD_0;
    multipop(R1,R2,R3,R4);
    [DISK_STATUS_TABLE+1]=1;
    [DISK_STATUS_TABLE+2]=pagenum;
    [DISK_STATUS_TABLE+3]=blocknum;
    store(pagenum,blocknum);
    [PROCESS_TABLE+curPID*16+4]=WAIT_DISK;
    call MOD_5;
    return;
endif;
//disk load
if(R1==2) then
    multipush(R1,R2,R3,R4);
    R1=3;
    call MOD_0;
    multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+1]=0;
	[DISK_STATUS_TABLE+2]=R3;
	[DISK_STATUS_TABLE+3]=R4;
    load(R3,R4);
    [PROCESS_TABLE+R2*16+4]=WAIT_DISK;
    call MOD_5;
    return;
endif;  
//terminal write
if(R1==3) then
    multipush(R1,R3);
    R1=8;
    call MOD_0;
    multipop(R1,R3);
    print R3;
    multipush(R1,R3);
    R1=9;
    call MOD_0;
    multipop(R1,R3);
    return;
endif;
//yerminal read
if(R1==4) then
    multipush(R1,R3);
    R1=8;
    call MOD_0;
    multipop(R1,R3);
    read;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_TERMINAL;
    multipush(R1,R3);
    call MOD_5;
    multipop(R1,R3);
    [([PTBR+2*(R3)/512]*512) + ((R3)%512)]=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 8];
    return;
endif;
