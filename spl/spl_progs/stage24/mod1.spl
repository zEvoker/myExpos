//Process Manager (MOD 1)

alias fnNumber R1;
alias currentPID R2;

// GET PCB Entry
if(fnNumber == GET_PCB_ENTRY) then
	alias PID R0;
	PID = 1;	
	while(PID<16) do
		if([PROCESS_TABLE + PID*16 + 4] == TERMINATED) then
			break;
		endif;
		PID = PID + 1;
	endwhile;
	if(PID > 15) then
		PID = -1;
		return;
	endif;
	[PROCESS_TABLE + PID*16 + 1] = PID;
	[PROCESS_TABLE + PID*16 + 4] = ALLOCATED;
	[PROCESS_TABLE + PID*16 + 14] = PAGE_TABLE_BASE + 20*PID;
	[PROCESS_TABLE + PID*16 + 15] = 10;
	return;

endif;



// FREE USER AREA PAGE
if(fnNumber == FREE_USER_AREA_PAGE) then
	alias userAreaPage R3;
	userAreaPage = [PROCESS_TABLE + 16*currentPID + 11];
	multipush(R1, R2, R3);
	R1 = RELEASE_PAGE;
	R2 = userAreaPage;
	call MEMORY_MANAGER;
	multipop(R1, R2, R3);
        alias resTab R4; 
        resTab = ([PROCESS_TABLE + currentPID*16 + 11] + 1)*512 - 16;
	alias i R5;
	i=0;
	while(i<16) do 
	  if([resTab + 2*i] == SEMAPHORE) then
	      multipush(R1, R2, R3, R4, R5);
	      R1 = RELEASE_SEMAPHORE;
	      R3 = currentPID;
	      R2 = [resTab + 2*i + 1];
	      call RESOURCE_MANAGER;
	      multipop(R1, R2, R3, R4, R5);
	  endif;
          if([resTab + 2*i] == FILE) then
 	    multipush(R1, R2, R3, R4, R5);
	    R1 = CLOSE;
	    R2 = [resTab + 2*i + 1];
 	    call FILE_MANAGER;
            multipop(R1, R2, R3, R4, R5);
          endif;
	i = i + 1;
	endwhile;
	return;
endif;

// EXIT PROCESS
if(fnNumber == 3) then
	multipush(R1, R2);
	R1 = 4;
	R2 = currentPID;
	call MOD_1;
	multipop(R1, R2);
	multipush(R1, R2);
	R1 = 2;
	R2 = currentPID;
	call MOD_1;
	multipop(R1, R2);
	[PROCESS_TABLE + (16*currentPID) + 4] = TERMINATED;

	if([PROCESS_TABLE + (16*currentPID) + 9] != 9) then
	  alias i R3;
	  i = 1;
	  alias procTab R4;
	  while(i<16) do
	    procTab = PROCESS_TABLE + (16*i);
	    breakpoint;
	    if([procTab + 4] == WAIT_PROCESS  && [procTab + 5] == currentPID) then
	  	[procTab + 4] = READY;
		[procTab + 5] = -1;
	    endif;
	    if([procTab + 2] == currentPID) then
	       [procTab + 2] = -1;
	    endif;
	  i = i + 1;
	  endwhile;
	endif;
	return;
endif;

// FREE PAGE TABLE
if(fnNumber == 4) then
	
	[PTBR + 0] = -1;
	[PTBR + 1] = "0000";	
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

	alias i R5;
	alias pageNum R4;
	i = 1;

	while(i<(PTLR-1)) do
		pageNum = [PTBR + 2 + 2*i];
		if(pageNum!=-1) then
			multipush(R1, R2, R3, R4);
			R1 = 2;
			R2 = pageNum;
			call MOD_2;
			multipop(R1, R2, R3, R4);
			[PTBR + 2 + 2*i] = -1;
			[PTBR + 2 + 2*i + 1] = "0000";	
		endif;
	i = i + 1;
	endwhile;
	i=2;
	while(i<10) do
	if([DISK_MAP_TABLE + currentPID*10 + i] != -1) then
		if(i<4 || i>7) then
			multipush(R1, R2, R4, R5);
			R1 = 4;
			R3 = currentPID;
			R2 = [DISK_MAP_TABLE + currentPID*10 + i];
			call MOD_2;
			multipop(R1, R2, R4, R5);
		endif;
		[DISK_MAP_TABLE + currentPID*10 + i] = -1;
	endif;
	i = i + 1;
	endwhile;
	return;

endif;