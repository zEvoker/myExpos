alias fNum R1;

//swap out
if(fNum==1) then
    alias i R3;
    i=3;
    while(i<MAX_PROC_NUM-1) do
        if([PROCESS_TABLE+16*i+6]==0 && ([PROCESS_TABLE+16*i+4]==WAIT_PROCESS || [PROCESS_TABLE+16*i+4]==WAIT_SEMAPHORE)) then
            break;
        endif;
        i=i+1;
    endwhile;
    alias maxTick R4;
    alias maxTickPID R5;
    maxTick=-1;
    maxTickPID=-1;
    if(i==MAX_PROC_NUM-1) then
        i=3;
        while(i<MAX_PROC_NUM-1) do
            if([PROCESS_TABLE+16*i+6]==0 && [PROCESS_TABLE+16*i+0]>maxTick && [PROCESS_TABLE+16*i+4]!=ALLOCATED && [PROCESS_TABLE+16*i+4]!=RUNNING && [PROCESS_TABLE+16*i+4]!=TERMINATED) then
                maxTick=[PROCESS_TABLE+16*i];
                maxTickPID=i;
            endif;
            i=i+1;
        endwhile;
    endif;
    if(maxTickPID==-1) then
        [SYSTEM_STATUS_TABLE+5]=0;
        R0=-1;
        return;
    endif;
    i=maxTickPID;

    [PROCESS_TABLE+16*i+0]=0;

    alias page R4;
    alias PTB R5;
    alias pageNo R6;
    PTB=[PROCESS_TABLE+i*16+14];
    page=8;
    while(page<15) do
        pageNo=[PTB+page];
        if(pageNo!=-1) then
            multipush(R1,R2,R3,R4,R5,R6);
            R1=RELEASE_PAGE;
            R2=pageNo;
            call MEMORY_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6);
            [PTB+page]=-1;
            [PTB+page+1]="0000";
        endif;
        page=page+2;
    endwhile;
    page=4;
    while(page<20) do
        pageNo=[PTB+page];
        if(page<7 || page>=16)then
            if(pageNo!=-1 && [MEMORY_FREE_LIST+pageNo]==1)then
                multipush(R1,R2,R3,R4,R5,R6);
                R1=6;
                call MEMORY_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6);
                alias Swap_Disk_No R0;
                [DISK_MAP_TABLE+10*i+page/2 ]=Swap_Disk_No;
                //Disk Store
                multipush(R1,R2,R3,R4,R5,R6);
                R1=1;
                R2=SWAPPER_DAEMON;
                R3=pageNo;
                R4=Swap_Disk_No;
                call DEVICE_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6);
                //Release Page
                multipush(R1,R2,R3,R4,R5,R6);
                R1=2;
                R2=pageNo;
                call MEMORY_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6);
                [PTB+page]=-1;
                [PTB+page+1]="0000";
            endif;
        endif;
        page=page+2;
    endwhile;
    [PROCESS_TABLE+16*i+6]=1;
    [SYSTEM_STATUS_TABLE+4]=[SYSTEM_STATUS_TABLE+4]+1;
    [SYSTEM_STATUS_TABLE+5]=0;
    R0=0;
    return;
endif;

//swap in
if(fNum==2) then
    alias i R2;
    alias max R3;
    alias index R4;
    index=-1;
    max=-1;
    i=3;
    while(i<MAX_PROC_NUM-1) do
        if([PROCESS_TABLE+16*i+6]==1 && [PROCESS_TABLE+16*i+4]==READY && [PROCESS_TABLE+16*i+0]>max) then
            max=[PROCESS_TABLE+16*i+0];
            index=i;
        endif;
        i=i+1;
    endwhile;
    if(index==-1) then
        [SYSTEM_STATUS_TABLE+5]=0;
        R0=-1;
        return;
    endif;
    i=index;
    alias PTB R5;
    PTB=[PROCESS_TABLE+i*16+14];
    [PROCESS_TABLE+16*i+0]=0;
    alias page R6;
    alias block R7;
    page=2;
    while(page<10) do
        block=[DISK_MAP_TABLE+10*i+page];
        if((page<4 || page>=8) && block!=-1) then
            alias freePage R8;
            multipush(R1,R2,R3,R4,R5,R6,R7);
            R1=GET_FREE_PAGE;
            call MEMORY_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7);
            freePage=R0;
            [PTB+2*page]=freePage;
            [PTB+2*page+1]="0110";
            multipush(R1,R2,R3,R4,R5,R6,R7);
            R1=DISK_LOAD;
            R2=SWAPPER_DAEMON;
            R3=freePage;
            R4=block;
            call DEVICE_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7);
            multipush(R1,R2,R3,R4,R5,R6,R7);
            R1=RELEASE_BLOCK;
            R2=block;
            R3=SWAPPER_DAEMON;
            call MEMORY_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7);
            [DISK_MAP_TABLE+10*i+page]=-1;
        endif;
        page=page+1;
    endwhile;
    [PROCESS_TABLE+16*i+6]=0;
    [SYSTEM_STATUS_TABLE+4]=[SYSTEM_STATUS_TABLE+4]-1;
    [SYSTEM_STATUS_TABLE+5]=0;
    R0=0;
    return;
endif;
return;