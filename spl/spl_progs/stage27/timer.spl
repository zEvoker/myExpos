alias userSP R1;
alias curPID R2;
alias procTable R3;
userSP=SP;
curPID=[SYSTEM_STATUS_TABLE+1];
procTable=PROCESS_TABLE+curPID*16;
[procTable+13]=SP;
SP=[procTable+11]*512-1;

backup;
//swap
if([SYSTEM_STATUS_TABLE+5]!=0) then //paging status
    if(curPID==SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE+5]==SWAP_OUT) then
        multipush(R1,R2,R3);
        R1=SWAP_OUT;
        R2=[SYSTEM_STATUS_TABLE+1];
        call PAGER_MODULE;
        multipop(R1,R2,R3);
    else
        if(curPID==SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE+5]==SWAP_IN) then
            multipush(R1,R2,R3);
            R1=SWAP_IN;
            R2=[SYSTEM_STATUS_TABLE+1];
            call PAGER_MODULE;
            multipop(R1,R2,R3); 
        endif;
    endif;
else
    //MEM_LOW=4 and MEM_HIGH=12
    if([SYSTEM_STATUS_TABLE+2]<MEM_LOW) then
        [SYSTEM_STATUS_TABLE+5]=SWAP_OUT;
    else
        if([SYSTEM_STATUS_TABLE+4]>0) then
            alias i R4;
            i=3;
            while(i<MAX_PROC_NUM-1) do
                if([PROCESS_TABLE+16*i+6]==1 && [PROCESS_TABLE+16*i+0]>MAX_TICK || [SYSTEM_STATUS_TABLE+2]>MEM_HIGH) then
                    [SYSTEM_STATUS_TABLE+5]=SWAP_IN;
                    break;
                endif;
                i=i+1;
            endwhile;
        endif;
    endif;
endif;

[procTable+4]=READY;

alias i R4;
i=0;
while(i<MAX_PROC_NUM) do
    if([PROCESS_TABLE+16*i+4]!=TERMINATED) then
        [PROCESS_TABLE+16*i+0]=[PROCESS_TABLE+16*i+0]+1;
    endif;
    i=i+1;
endwhile;

call SCHEDULER;

restore;
SP=userSP;
ireturn;