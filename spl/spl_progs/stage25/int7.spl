alias userSP R1;
alias curPID R2;
alias processTable R3;

userSP=SP;
curPID=[SYSTEM_STATUS_TABLE+1];
processTable=PROCESS_TABLE+curPID*16;
[processTable+9]=5;
[processTable+13]=userSP;
SP=[processTable+11]*512;

alias fileDesc R4;
fileDesc=[[PTBR+2*(userSP-4)/512]*512+(userSP-4)%512];

alias word R5;
word=[[PTBR+2*(userSP-3)/512]*512+(userSP-3)%512];

if(fileDesc!=-2) then
    if(fileDesc<0 || fileDesc>7) then
        R11=-1;
        goto ex;
    endif;
    alias resTable R6;
    resTable=[processTable+11]*512+RESOURCE_TABLE_OFFSET;
    if([resTable+2*fileDesc]!=FILE) then
        R11=-1;
        goto ex;
    endif;
    alias fileIndex R7;
    fileIndex=[resTable+2*fileDesc+1];
    alias inodeIndex R8;
    inodeIndex=[OPEN_FILE_TABLE+4*fileIndex];
    if([processTable+3]!=1 && [INODE_TABLE+16*inodeIndex+3]!=[processTable+3] && [INODE_TABLE+inodeIndex*16+4]==EXCLUSIVE) then
        R11=-3;
        goto ex;
    endif;
    multipush(R1,R2,R3,R4,R5);
    R1=ACQUIRE_INODE;
    R3=R2;
    R2=inodeIndex;
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    if(R0==-1) then
        R11=-1;
        goto ex;
    endif;
    alias lseek R9;
    lseek=[OPEN_FILE_TABLE+4*fileIndex+2];
    if(lseek==MAX_FILE_SIZE) then
        multipush(R1,R2,R3);
        R1=RELEASE_INODE;
        R3=R2;
        R2=inodeIndex;
        call MOD_0;
        multipop(R1,R2,R3);
        R11=-2;
        goto ex;
    endif;
    if(lseek%512==0 && lseek==[INODE_TABLE+16*inodeIndex+2]) then
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
        R1=GET_FREE_BLOCK;
        call MOD_2;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);
        if(R0==-1) then
            multipush(R1,R2,R3);
            R1=RELEASE_INODE;
            R3=R2;
            R2=inodeIndex;
            call MOD_0;
            multipop(R1,R2,R3);
            R11=-2;
            goto ex;
        endif;
        [INODE_TABLE+inodeIndex*16+8+lseek/512]=R0;
    endif;
    alias block R10;
    alias offset R12;
    block=[INODE_TABLE+inodeIndex*16+8+lseek/512];
    offset=lseek%512;
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
    R1=BUFFERED_WRITE;
    R2=block;
    R3=offset;
    R4=word;
    call MOD_3;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
    if(lseek==[INODE_TABLE+inodeIndex*16+2]) then
        [INODE_TABLE+16*inodeIndex+2]=[INODE_TABLE+16*inodeIndex+2]+1;
    endif;
    [OPEN_FILE_TABLE+fileIndex*4+2]=[OPEN_FILE_TABLE+fileIndex*4+2]+1;
    multipush(R1,R2,R3);
    R1=RELEASE_INODE;
    R3=curPID;
    R2=inodeIndex;
    call MOD_0;
    multipop(R1,R2,R3);
    R11=0;
    goto ex;
else
    multipush(R1,R2,R3,R4,R5);
    R1=TERMINAL_WRITE;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=word;
    call MOD_4;
    multipop(R1,R2,R3,R4,R5);
    R11=0;
    goto ex;
endif;
ex:
    [[PTBR+2*(userSP-1)/512]*512+(userSP-1)%512]=R11;
    SP=userSP;
    [processTable+9]=0;
    ireturn;