//int 8 syscall 8

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 8;

//get pcb entry from process manager
alias funcNum R1;
alias PID R2;
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
alias childPID R0;

//if no free process table
if(R0==1) then
    [[PTBR+2*([PROCESS_TABLE+PID*16+13]-1)/512]*512+([PROCESS_TABLE+PID*16+13]-1)%512]=-1;
    [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
    SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
    ireturn;
endif;

alias pageTable R1;
alias curPID R2;
R2=[SYSTEM_STATUS_TABLE+1];
R1=[PROCESS_TABLE+R2*16+14];

//no heap for parent
if([R1+4]==-1) then
    multipush(R0,R1,R2);
    //get free page
    R1=1;
    call MOD_2;
    R3=R0;
    multipop(R0,R1,R2);
    [R1+4]=R3;
    [R1+5]="0110";
    multipush(R0,R1,R2);
    R1=1;
    call MOD_2;
    R3=R0;
    multipop(R0,R1,R2);
    [R1+6]=R3;
    [R1+7]="0110";
endif;

//initialize child process table
alias childProcessTable R4;
R4=PROCESS_TABLE+childPID*16;
alias parentPrcoessTable R5;
R5=PROCESS_TABLE+curPID*16;
[R4+3]=[R5+3];
[R4+6]=[R5+6];
[R4+10]=[R5+10];
[R4+7]=[R5+7];
[R4+13]=[R5+13];
[R4+9]=0;
[R4+12]=0;
[R4+0]=0;
[R4+2]=curPID;
[R4+4]=CREATED;

//new mem page for stack(2) and user area page(1)
multipush(R0,R1,R2,R3,R4,R5);
R1=1;
call MOD_2;
R6=R0;
multipush(R6);
R1=1;
call MOD_2;
R7=R0;
multipush(R7);
R1=1;
call MOD_2;
R8=R0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
//UAP
[R4+11]=R6;
//stack

//per process resource table
alias i R6;
R8=([parentPrcoessTable+11]+1)*512-16;
i=1;
while(i<17) do
    if([R8+i-1]==1) then
        [SEMAPHORE_TABLE+4*([R8+i])+1]=[SEMAPHORE_TABLE+4*([R8+i])+1]+1;
    endif;
    [[R4+11]+1*512-i]=[[R5+11]+1*512-i];
    i=i+1;
endwhile;
//per process disk map table
i=0;
while(i<10) do
    [DISK_MAP_TABLE+childPID*10+i]=[DISK_MAP_TABLE+curPID*10+i];
    i=i+1;
endwhile;

//child page table
alias childPageTable R9;
R9=[R4+14];
i=0;
while(i<16) do
    [R9+i]=[R1+i];
    if(i%2==0) then
        if([R1+i]!=-1) then
            [MEMORY_FREE_LIST+[R1+i]]=[MEMORY_FREE_LIST+[R1+i]]+1;
        endif;
    endif;
    i=i+1;
endwhile;

//stack
[R9+16]=R7;
[R9+17]=[R1+17];
[R9+18]=R8;
[R9+19]=[R1+19];

//copy user stack
i=0;
while(i<512) do
    [[R9+16]*512+i]=[[R1+16]*512+i];
    [[R9+18]*512+i]=[[R1+18]*512+i];
    i=i+1;
endwhile;

//store BP value on kernel stack so that it gets initialized
[[R4+11]*512]=BP;

//set return values
[[R1+2*([PROCESS_TABLE+curPID*16+13]-1)/512]*512+([PROCESS_TABLE+curPID*16+13]-1)%512]=childPID;
[[R9+2*([PROCESS_TABLE+curPID*16+13]-1)/512]*512+([PROCESS_TABLE+curPID*16+13]-1)%512]=0;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
ireturn;