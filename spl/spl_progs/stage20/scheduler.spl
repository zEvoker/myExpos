//obtain the PID of the current process from the System Status Table
alias currentPID R0;
currentPID=[SYSTEM_STATUS_TABLE+1];

//push the BP of the current process on top of the kernel stack
multipush (BP);

//Obtain the Process Table entry corresponding to the current PID
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

//Iterate through the Process Table entries, starting from the succeeding entry of the current process to find a process in READY or CREATED state.
//If no such process can be found, select the idle process as the new process to be scheduled. Save PID of new process to be scheduled as newPID
alias newPID R2;
//print "SCHED";
newPID=currentPID+1;
while(newPID!=currentPID && [PROCESS_TABLE+(newPID*16)+4]!=READY && [PROCESS_TABLE+(newPID*16)+4]!=CREATED) do
    //print [PROCESS_TABLE+(newPID*16)+4];
    newPID=newPID+1;
    newPID=newPID%16;
endwhile;

//Obtain User Area Page number and kernel stack pointer value from Process Table entry of the new process and set SP as (User Area Page number) * 512 + (Kernel Stack pointer value)
//PTBR, PTLR and PID
alias newP R3;
newP= PROCESS_TABLE + newPID * 16;
SP =  [newP + 11] * 512 + [newP + 12] ;
PTBR = [newP + 14];
PTLR = [newP + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

//if new process is in created 
if([newP+4]==CREATED) then
    SP = [newP + 13];
    BP = [[newP+11]*512];
    [newP+4]=RUNNING;
    [newP+9]=0;
    ireturn;
endif;

//new state, restore BP
[newP+4]=RUNNING;
multipop (BP);
return;
